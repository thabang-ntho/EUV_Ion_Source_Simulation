# Beam / absorption
lambda_pp = 1.064e-06[m]                          # pre-pulse wavelength
A_PP      = 0.056                                  # absorptivity at 1.064 um (Fresnel)
recoil_coeff = 0.1                                 # recoil pressure coefficient (dimensionless)

# Beam geometry
# Define either d_beam (FWHM diameter) OR w0 (1/e^2 radius). If both are set,
# w0 expression below takes precedence.
d_beam = 40e-6[m]                                  # beam FWHM diameter
w0     = d_beam/sqrt(2*log(2))                     # 1/e^2 beam radius
x_beam = 0[um]                                     # if 0, script centers to Lx/2
# y_beam defaults to Ly/2 in the script if not set or zero-like
laser_theta_deg = 0[deg]                           # propagation angle (0° = +x, west→east)
illum_mode = cos_inc                               # {cos_inc, nx_shadow}

# Evaporation (Hertz–Knudsen)
HK_gamma = 1                                       # evaporation accommodation coefficient
# Vapor-pressure law for liquid tin (Antoine-like, Pa) — from literature
# Source: Alcock, Itkin, Horrigan (1984) via compiled property fits.
# Valid roughly for 505 K ≤ T ≤ 1850 K
p_sat_expr = (exp((-1.5332e4/T + 8.14281)*log(10)))*1.3332e2

# Time / pulse scales used by P(t)
E_PP_total = 0.015[J]                              # total pre-pulse energy
E_PP_ramp  = 0.0005[J]                             # ramp energy
tau_ramp   = 1.67e-07[s]                           # ramp duration
tau_square = 1e-08[s]                              # square duration
t_ramp_start = 0[s]                                # ramp start time
t_ramp_end   = t_ramp_start+tau_ramp               # ramp end time
t_sq_start   = t_ramp_end                          # square start time
t_sq_end     = t_sq_start+tau_square               # square end time
eps_t = 5e-10[s]                                   # smoothing size for flc2hs
P_ramp_max = 2*E_PP_ramp/tau_ramp                  # ramp peak power
P_square   = (E_PP_total-E_PP_ramp)/tau_square     # square power

# q_abs_2D is defined in the model script; this line remains commented to avoid conflicts.
# q_abs_2D = A_PP*(2/(pi*w0^2))*Ppp(t)*exp(-2*((x-x_beam)^2+(y-y_beam)^2)/w0^2)*max(0,nx)
